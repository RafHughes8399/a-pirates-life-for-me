

A PIRATE'S LIFE FOR ME MARCH LOGS 

5th of March

implementing collision algorithm that is not O(n^2) that is stinky and yucky algorithm. I found resources for a 
linear algorithm

sort and sweep algorithm lets break it down: 


dealing with the AABB axis-aligned bounding box of an object


the idea is to maintain a sorted linked list 

on each axis, a box corresponds to an interval [b, e] on the axis. For all objects, these intervals
can be placed into a sorted list. The list is traversed to track active intervals

for an internval [b,e] if there are any other intervals [bi, ei] such that bi < e then 
the AABB is added to the list and a collision is potentially detected

then an interaction needs to occur, for that there can be an interaction class

the world objects list is sorted by the AABB, raylib can get you the bounding box of each object

do it for the axis with the highest variance



find the axis of maximal variance
sort the list of objects by their bounding box position on that axis
then find intersections for each entity by check the bounds with the next closest

if the bounds do not match end early, otherwise if they do, check for an intersection (hitboxes)

but you can set this up tomorrow easily enough I think (maybe aside from hitboxes for now)




then perform an interaction

defined by an interaction manager or something 
i think i should rewatch the videos to understand the logic better

there is a list of all interactions that could possibly happen in the game, you define then 
i.e ship-water interaction, ship-cannonball interaction, etc 

the interaction implementation should manipulate the two entiteis

you call the interaction based on the entiteis that are intersecting (rewatch the videos for this logic )



6th and 7th of March

ok final time chatting bout dis

sort and sweep

SORT GAME OBJECTS BY THEIR AABBs ON THE AXIS OF MOST VARIANCE

FOR THIS YOU NEED A CUSTOM COMPARATOR, that can sort AABB on the axis of most variance


9th of March
-> define an ocean class 
-> use ocean class for the ocean
-> implement ship interact
-> test buoyancy and collison

-> implement wind and ship controls 
-> adjusting sail direction and length
-> turning the wheel
-> dropping and raising anchor

but where am I at now. Trying to implement entity interaction

there is an interaction class with a list of interactors and interactees
a list of interactions is stored in the world

an object has a list of interactors and interactees (the interactions for which it is an interactor, and 
the interactiosn for whcih it is an interactee)


first things first, what I do know is that i need an ocean class


10th of March
I think collision is there , I just need to test it to make sure the interactions don't double up.

I also need to change the value of water density, that is too large


I think acceleration is being compounded over each frame, but it 


ok there's some funky freaky stuff happening, the bounding boxes are not changing over each frame ?
which is compounding the interaction over and over again, causing the buounacy to go to infinity


think about a template method for object update 
-> update the position
-> update the bounding box


11th of March
time to support player actions and allow them to control parts of the ship 

1. the anchor
	 - can be lowered and raised 
	 - when the anchor is lowered is affects acceleration on the x and z axis by n units per frame, until acceleration reaches 0
	 - while the anchor is lowered the ship cannot accelerate on the x and z axis 

	 - the anchor is raised 


after wind is done, i would work on the object builder and factory 

12th of March
Ship Controls
Sails (Raise/Lower, Rotate Left/Right)
Helm (Turn Left / Right, Centre)
Anchor(Raise / Lower)

Currently I'm thinking you press a button to go into a mode (i.e sail mode, helm mode, anchor mode)
and then you press the button 

or or:
A, D for helm steering
R for anchor raise / lower
F is the interact key 
W. S for sail rasing / lowering
Q, E for sail rotating


ok, controls can be thought of mapping a key to a player action 
and then when updating the player you check if any of the mapped keys are pressed, if they are, invoke
 the method

 steering and turning happens at a constant rate (i.e a set amount of units per function call)

 there are two types of key interactions, is key down and is key pressed

 13th of March
 -> implement the player control functions
 -> setup a debug screen 
 -> test controls 

 -> add wind 
 -> test movement


 -> ship methods
 -> player update x 
 -> world debug

 -> in ship update calculate the directoin coefficients from the direction and append to velocity
 -> visual debug



 ok little update good progress boy
 -> have basic controls over the ship aside from anchor
 how should the anchor work ? there are some options
 1. have a button to raise the anchor, and one to lower it, like the sail
 2. have one button that raises/lowers the anchor. It stops moving when it reaches the top or bottom

 option 1 is simple, you can copy the code from the sail
 option 2 is less simple, what happens depends on the state of the anchor. There are several cases
 
 case 1
 if not moving -> start moving 
 
 case 2 
 if moving -> move in the opposite direction

 so the anchor is either moving or not moving

 its also about tracking the speed 
 so if not moving the speed is 0, then the direction it moves depends on its height for case 1
 for case 2 just * -1 
 while moving the acceleration dampening coefficient depends on its height
 once the anchor reaches the top or bottom it becomes stationary




 14 March
 -> rotate the actual ship object
 how should the wind work?
 the wind has speed and 
the ship does not move 
its like a percent match to the wind

the sail has a width right, it forms an arc on the unit circle so first things first




i also think you need to 


15 March
-> wind implementation
-> sail arc


-> the wind always moves the ship forward, it just chaanges based on how 
well the sail matches the wind

-> integraate movement coefficients (anchor, wind, sail, ship direction) into
ship movement
-> test ship movement



-> the direction coefficient depends on the wind 
-> the speed coefficient depoends on the match between the sail and the wind


-> figure out delta and lerp maybe  